from ast import Dict
import os
from pathlib import Path
script_location: str = Path(__file__).parent.absolute()
folder: str = "files"
include_folder: str = "include"


#Helper functions
def createFolder(folder:str)->None:
    if not os.path.exists(os.path.join(script_location, folder)):
        os.mkdir(os.path.join(script_location, folder))

def generateGraph(folder:str)->dict[str, list[str]]:
    createFolder(folder)
    fileList: dict[str, list[str]] = {}
    for dirpath, _, filenames in os.walk(os.path.join(script_location, folder)):
        _folder: list[str] = []
        for file in filenames:
            _folder.append(file)
        fileList[os.path.relpath(dirpath)] = _folder
    return fileList

def generateHeader(file: str) -> str:
    header: list[str] = [
        f"//AUTO GENERATED BY PYTHON SCRIPT, FILE IS AT {file}",
        "//DO NOT IMPORT THIS! USE THE RESPECTIVE FILESYSTEM LIBRARY",
        "#pragma once",
        "#include <stdint.h>",
        "#include <stddef.h>",
        ""
    ]
    var_name: str =  str(os.path.split(file)[0]).upper().replace("/", "_") + "_" + str(os.path.splitext(os.path.basename(file))[0]).upper()
    with open(file, "rb") as fi:
        data: bytes = fi.read()
        bytes_per_line: int = 12
        bytes_str: list[str] = []
        header.append(f"const size_t {var_name.upper()}_SIZE = {len(data)};")
        header.append(f"const uint8_t {var_name}_DATA[] = {{")
        for i in range(0, len(data), bytes_per_line):
            chunk = data[i:i+bytes_per_line]
            line = ", ".join(f"0x{b:02x}" for b in chunk)
            bytes_str.append(f"    {line},")
        header.extend(bytes_str)
        header.append("};")
    return "\n".join(header)

#main
def main():
    graph: dict[str, list[str]] = generateGraph("files")
    paths: list[str] = []
    for folder, files in graph.items():
        location:str = os.path.join(include_folder, folder)
        createFolder(location)
        for file in files:
            fileName: str = os.path.splitext(file)[0]
            header: str = generateHeader(os.path.join(folder, file))
            paths.append(os.path.join(folder, fileName+".h"))
            with open(os.path.join(location, fileName+".h"), "w") as head:
                head.write(header)
    with open(os.path.join(include_folder, "files_main.h"), "w") as ma:
        lines: list[str]= []
        for path in paths:
            lines.append(f'#include "{path}"')
        print(lines)
        ma.write("\n".join(lines))
    pass

if __name__ == "__main__":
    main()