from ast import Dict
import os
from pathlib import Path
script_location: str = Path(__file__).parent.absolute()
folder: str = "files"
include_folder: str = "include"


#Helper functions
def createFolder(folder:str)->None:
    if not os.path.exists(os.path.join(script_location, folder)):
        os.mkdir(os.path.join(script_location, folder))

def generateGraph(folder:str)->dict[str, list[str]]:
    createFolder(folder)
    fileList: dict[str, list[str]] = {}
    for dirpath, _, filenames in os.walk(os.path.join(script_location, folder)):
        _folder: list[str] = []
        for file in filenames:
            _folder.append(file)
        fileList[os.path.relpath(dirpath)] = _folder
    return fileList

def generateHeader(file: str) -> str:
    header: list[str] = []
    var_name: str =  str(os.path.split(file)[0]).upper().replace("/", "_") + "_" + str(os.path.splitext(os.path.basename(file))[0]).upper()
    var_name = var_name.replace("\\", "_")
    with open(file, "rb") as fi:
        data: bytes = fi.read()
        bytes_per_line: int = 12
        bytes_str: list[str] = []
        header.append(f"const uint8_t {var_name}_BYTES[] = {{")
        for i in range(0, len(data), bytes_per_line):
            chunk = data[i:i+bytes_per_line]
            line = ", ".join(f"0x{b:02x}" for b in chunk)
            bytes_str.append(f"    {line},")
        header.extend(bytes_str)
        header.append(f"}};\nEMBEDDED_FILE_STRUCT {var_name}_DATA = {{")
        header.append(f"\t{var_name}_BYTES, sizeof({var_name}_BYTES) \n}};")
    return "\n".join(header) ,var_name

#main
def main():
    graph: dict[str, list[str]] = generateGraph("files")
    paths: list[str] = []
    cpp_mapping: dict[str, str] = {}
    header: list[str] = [
         f"//AUTO GENERATED BY PYTHON SCRIPT",
        "#pragma once",
        "#include <stdint.h>",
        "#include <stddef.h>",
        '#include "map"', 
        '#include "string"',
        "\nstruct EMBEDDED_FILE_STRUCT {\n\tconst uint8_t* data;\n\tconst size_t size;\n};"
    ]
    if os.path.exists(os.path.join(include_folder, "files")):
        __import__("shutil").rmtree(os.path.join(include_folder, "files"))
    createFolder(os.path.join(include_folder, "files"))
    for folder, files in graph.items():
        location:str = os.path.join(include_folder, folder)
        for file in files:
            fileName: str = os.path.splitext(file)[0]
            h, varName = generateHeader(os.path.join(folder, file))
            #paths.append(os.path.join(folder, fileName+".h"))
            cpp_mapping[os.path.join(folder, file)] = varName
            header.append(h)
    if True:
        lines: list[str]= []
       # for path in paths:
         #   lines.append(f'#include "{path}"')
        
        lines += [
            "std::map<std::string, EMBEDDED_FILE_STRUCT> FILE_MAPPING = {"
        ]
        for path,c_def in cpp_mapping.items():
            lines.append(f'\t{{"{path.replace("\\", "/")}", {c_def}_DATA}},')
        lines += ["};"]
        header.extend(lines)
    with open(os.path.join(include_folder, "files", "main_files.h"), "w") as head:
        head.write("\n".join(header))


    pass

if __name__ == "__main__":
    main()